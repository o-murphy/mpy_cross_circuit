name: Build mpy-cross (test)

on:
  workflow_dispatch:

jobs:

  cp_versions:
    name: Collect actual versions
    runs-on: ubuntu-latest
    outputs:
      all_versions: ${{ steps.get_cp_versions.outputs.all_versions }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (semver)
        run: |
          pip install semver

      - name: Determine mpy-cross versions
        id: get_cp_versions
        run: |
          # Execute the script and capture the output
          versions=$(python mpy_cross_circuit/versions.py)

          # Print the raw output for debugging
          echo "Raw output: $versions"

          # Check if the output is empty
          if [ -z "$versions" ]; then
            echo "Error: No versions found by mpy_cross_circuit/versions.py"
            exit 1
          fi
          # Split the output into an array, handling potential newlines and extra spaces
          versions_array=($(echo "$versions" | tr -s ' '))

          # Join the array elements with commas for JSON compatibility
          versions_string=$(IFS=','; echo "${versions_array[*]}")
          echo "MPY_VERSIONS=$versions_string" >> $GITHUB_ENV
          echo "::set-output name=all_versions::[$versions_string]"


  build-windows:
    name: Build on windows
    runs-on: windows-latest
    needs: cp_versions
    strategy:
      matrix:
        arch: [ i686, x86_64 ]
        cp_version: ${{ fromJson(format('[{0}]', needs.cp_versions.outputs.all_versions)) }} # Corrected syntax

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync submodule to mpy_version
        run: |
          git submodule update --init --depth 1
          cd circuitpython
          git fetch origin "${{ env.cp_version }}" --depth=1
          git checkout "${{ env.cp_version }}"
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install huffman
        run: python -m pip install huffman

      # Set Windows i386 environment
      - name: Set Windows i386 env
        if: matrix.arch == 'i686'
        run: |
          echo "CROSS_TRIPLE=i686-w64-mingw32" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "PLATFORM_TAG=win32" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "CFLAGS_EXTRA=" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "EXT=.exe" | Out-File -Append -FilePath $env:GITHUB_ENV
          # echo "CRS=" | Out-File -Append -FilePath $env:GITHUB_ENV

      # Set Windows x86_64 environment
      - name: Set Windows x86_64 env
        if: matrix.arch == 'x86_64'
        run: |
          echo "CROSS_TRIPLE=x86_64-w64-mingw32" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "PLATFORM_TAG=win_amd64" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "CFLAGS_EXTRA=" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "EXT=.exe" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "CRS=" | Out-File -Append -FilePath $env:GITHUB_ENV

      # Debug output
      - name: Print environment
        run: |
          echo "PLATFORM_TAG=$env:PLATFORM_TAG"
          echo "CROSS_TRIPLE=$env:CROSS_TRIPLE"
          echo "EXT=$env:EXT"
          echo "CRS=$env:CRS"
          echo "CFLAGS_EXTRA=$env:CFLAGS_EXTRA"

      - name: Install build dependencies (Windows)
        run: |
          choco install make
          echo "You may need to adjust your Windows toolchain (MSVC or MinGW)"
          make -C circuitpython/mpy-cross clean

      - name: Build mpy-cross (Windows)
        run: |
          ${CRS:-}make -C circuitpython/mpy-cross
          # mv circuitpython/mpy-cross/build/mpy-cross${EXT:-} ./mpy-cross${EXT:-} || \
          # mv circuitpython/mpy-cross/mpy-cross${EXT:-} ./mpy-cross${EXT:-} || \
          # mv circuitpython/mpy-cross/mpy-cross ./mpy-cross${EXT:-}
          # file ./mpy-cross${EXT:-}
        continue-on-error: true  # same as allow_failure
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-windows-${{ env.cp_version }}-${{ matrix.arch }}${{ env.EXT }}
          # name: mpy-cross-windows-${{ matrix.arch }}
          path: circuitpython/mpy-cross/build/mpy-cross${{ env.EXT }}
          retention-days: 8

      # Upload the compiled artifact
      # - name: Upload mpy-cross artifact (Windows)
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: mpy-cross-windows-${{ matrix.arch }}
      #     path: ./mpy-cross${{ env.EXT }}  # Use EXT environment variable
      #     retention-days: 8

  build-linux:
    name: Build on linux
    runs-on: ubuntu-latest
    needs: cp_versions
    strategy:
      matrix:
        arch: [ x86_64, i686, armv7l, aarch64 ]
        cp_version: ${{ fromJson(format('[{0}]', needs.cp_versions.outputs.all_versions)) }} # Corrected syntax

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync submodule to mpy_version
        run: |
          git submodule update --init --depth 1
          cd circuitpython
          git fetch origin "${{ env.cp_version }}" --depth=1
          git checkout "${{ env.cp_version }}"
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install huffman
        run: python -m pip install huffman

      # Linux x86_64
      - name: Set Linux x86_64 env
        if: matrix.arch == 'x86_64'
        run: |
          echo "CROSS_TRIPLE=" >> $GITHUB_ENV
          echo "PLATFORM_TAG=manylinux1_x86_64" >> $GITHUB_ENV
          echo "CFLAGS_EXTRA=" >> $GITHUB_ENV

      # Linux i686
      - name: Set Linux i686 env
        if: matrix.arch == 'i686'
        run: |
          echo "CROSS_TRIPLE=" >> $GITHUB_ENV
          echo "PLATFORM_TAG=manylinux1_i686" >> $GITHUB_ENV
          echo "CFLAGS_EXTRA=" >> $GITHUB_ENV
          echo "CRS=linux32 " >> $GITHUB_ENV

      # Linux armv7l
      - name: Set Linux armv7l env
        if: matrix.arch == 'armv7l'
        run: |
          echo "CROSS_TRIPLE=arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "PLATFORM_TAG=manylinux2014_armv7l" >> $GITHUB_ENV
          echo "CFLAGS_EXTRA=" >> $GITHUB_ENV
          echo "CRS=/usr/bin/crossbuild " >> $GITHUB_ENV

      # Linux aarch64
      - name: Set Linux aarch64 env
        if: matrix.arch == 'aarch64'
        run: |
          echo "CROSS_TRIPLE=aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PLATFORM_TAG=manylinux2014_aarch64" >> $GITHUB_ENV
          echo "UNSET_CPP=true" >> $GITHUB_ENV

      # Debug output
      - name: Print environment
        run: |
          echo "PLATFORM_TAG=$PLATFORM_TAG"
          echo "CROSS_TRIPLE=$CROSS_TRIPLE"
          echo "CRS=$CRS"
          echo "CFLAGS_EXTRA=$CFLAGS_EXTRA"

      # Optional: Unset CPP if needed
      - name: Unset CPP
        if: env.UNSET_CPP == 'true'
        run: unset CPP

      - name: Install build dependencies (Linux)
        run: |
          sudo apt-get update || true
          sudo apt-get install -y build-essential libffi-dev || true
          sudo apt-get install crossbuild-essential-arm64
          make -C circuitpython/mpy-cross clean

      - name: Build mpy-cross (Linux)
        run: |
          ${CRS:-}make -C circuitpython/mpy-cross
        continue-on-error: true  # same as allow_failure
        shell: bash

      - name: List files in the build directory
        run: |
          ls -alh ./mpy-cross* || echo "No mpy-cross files found"

      # Upload the compiled artifact
      - name: Upload mpy-cross artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-linux-${{ env.cp_version }}-${{ matrix.arch }}
          # name: mpy-cross-linux-${{ matrix.arch }}
          path: circuitpython/mpy-cross/build/mpy-cross
          retention-days: 8

  build-macos:
    name: Build on macOS
    runs-on: macos-13
    needs: cp_versions
    strategy:
      matrix:
        arch: [ x86_64, arm64 ]
        cp_version: ${{ fromJson(format('[{0}]', needs.cp_versions.outputs.all_versions)) }} # Corrected syntax

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync submodule to mpy_version
        run: |
          git submodule update --init --depth 1
          cd circuitpython
          git fetch origin "${{ env.cp_version }}" --depth=1
          git checkout "${{ env.cp_version }}"
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install huffman
        run: python -m pip install huffman

      # Install build dependencies (macOS)
      - name: Install build dependencies (macOS)
        run: |
          brew install clang make libffi || true  # Skip if already installed
          sudo brew update || true  # Retry brew update step (ignore errors)
          make -C circuitpython/mpy-cross clean

      # Build for macOS (x64)
      - name: Build mpy-cross
        run: |
          make -C circuitpython/mpy-cross -j4

      - uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-macos-${{ env.cp_version }}-x64
          # name: mpy-cross-macos-x64
          path: circuitpython/mpy-cross/build/mpy-cross
          retention-days: 8

      # Build for macOS (arm64)
      - name: Build circuitpython/mpy-cross (arm64)
        run: make -C circuitpython/mpy-cross -j4 -f Makefile.m1 V=2

      - uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-macos-${{ env.cp_version }}-arm64
          # name: mpy-cross-macos-arm64
          path: circuitpython/mpy-cross/build-arm64/mpy-cross-arm64
          retention-days: 8

      # Build for macOS (universal)
      - name: Make universal binary
        run: |
          lipo -create -output mpy-cross-macos-universal circuitpython/mpy-cross/build/mpy-cross circuitpython/mpy-cross/build-arm64/mpy-cross-arm64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-macos-${{ env.cp_version }}-universal
          # name: mpy-cross-macos-universal
          path: mpy-cross-macos-universal
          retention-days: 8

  build-static:
    name: Build static
    runs-on: ubuntu-24.04
    needs: cp_versions
    strategy:
      fail-fast: false
      matrix:
        mpy-cross: [ "static", "static-aarch64", "static-mingw", "static-raspbian" ]
        cp_version: ${{ fromJson(format('[{0}]', needs.cp_versions.outputs.all_versions)) }} # Corrected syntax
    env:
      EX_static-mingw: static.exe
      OS_static: linux-amd64
      OS_static-aarch64: linux-aarch64
      OS_static-mingw: windows
      OS_static-raspbian: linux-raspbian

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync submodule to mpy_version
        run: |
          git submodule update --init --depth 1
          cd circuitpython
          git fetch origin "${{ env.cp_version }}" --depth=1
          git checkout "${{ env.cp_version }}"
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install huffman
        run: python -m pip install huffman

      - name: Install toolchain (aarch64)
        if: matrix.mpy-cross == 'static-aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install toolchain (mingw)
        if: matrix.mpy-cross == 'static-mingw'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build mpy-cross.${{ matrix.mpy-cross }}
        run: make -C circuitpython/mpy-cross -j4 -f Makefile.${{ matrix.mpy-cross }}

      - name: Set output
        env:
          EX: ${{ env[format('EX_{0}', matrix.mpy-cross)] || matrix.mpy-cross }}
          OS: ${{ env[format('OS_{0}', matrix.mpy-cross)] }}"
        run: |
          echo >> $GITHUB_ENV "EX=$EX"
          echo >> $GITHUB_ENV "OS=$OS"

      #- name: Upload artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: mpy-cross.${{ env.EX }}
      #    path: circuitpython/mpy-cross/build-${{ matrix.mpy-cross }}/mpy-cross.${{ env.EX }}
      #    retention-days: 8

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpy-cross-${{ env.OS }}-${{ env.cp_version }}.${{ env.EX }}
          path: circuitpython/mpy-cross/build-${{ matrix.mpy-cross }}/mpy-cross.${{ env.EX }}
          retention-days: 8

  collect-binaries:
    name: Collect all binaries
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-linux
      - build-macos
      - build-static

    steps:
      - name: Create directory to collect artifacts
        run: mkdir -p binaries

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries

      - name: List all collected artifacts
        run: ls -R binaries

      - name: Upload all artifacts as one archive (optional)
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: binaries
          retention-days: 8
